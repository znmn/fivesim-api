const axios = require("axios");

class FiveSimAPI {
	static baseURL = "https://5sim.net/v1";

	constructor(token) {
		if (!token) {
			throw new Error("API token is required");
		}

		this.token = token;
		this.client = axios.create({
			baseURL: FiveSimAPI.baseURL,
			headers: {
				Authorization: `Bearer ${token}`,
				Accept: "application/json",
			},
		});
	}

	// Guest (Static) Methods
	static async getProducts(country, operator) {
		try {
			const response = await axios.get(`${this.baseURL}/guest/products/${country}/${operator}`, {
				headers: { Accept: "application/json" },
			});
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	static async getPrices() {
		try {
			const response = await axios.get(`${this.baseURL}/guest/prices`, {
				headers: { Accept: "application/json" },
			});
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	static async getPricesByCountry(country) {
		try {
			const response = await axios.get(`${this.baseURL}/guest/prices`, {
				headers: { Accept: "application/json" },
				params: { country },
			});
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	static async getPricesByProduct(product) {
		try {
			const response = await axios.get(`${this.baseURL}/guest/prices`, {
				headers: { Accept: "application/json" },
				params: { product },
			});
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	static async getPricesByCountryAndProduct(country, product) {
		try {
			const response = await axios.get(`${this.baseURL}/guest/prices`, {
				headers: { Accept: "application/json" },
				params: { country, product },
			});
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	static async getNotifications(lang) {
		try {
			const response = await axios.get(`${this.baseURL}/guest/flash/${lang}`, {
				headers: { Accept: "application/json" },
			});
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	static async getCountries() {
		try {
			const response = await axios.get(`${this.baseURL}/guest/countries`, {
				headers: { Accept: "application/json" },
			});
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	// User Methods
	async getProfile() {
		try {
			const response = await this.client.get("/user/profile");
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async getOrderHistory({ category, limit = 15, offset = 0, order = "id", reverse = true } = {}) {
		try {
			const params = {
				category,
				limit,
				offset,
				order,
				reverse,
			};
			const response = await this.client.get("/user/orders", { params });
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async getPaymentHistory({ limit = 15, offset = 0, order = "id", reverse = true } = {}) {
		try {
			const params = { limit, offset, order, reverse };
			const response = await this.client.get("/user/payments", { params });
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async getPriceLimits() {
		try {
			const response = await this.client.get("/user/max-prices");
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async setPriceLimit(productName, price) {
		try {
			const response = await this.client.post("/user/max-prices", {
				product_name: productName,
				price,
			});
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async deletePriceLimit(productName) {
		try {
			const response = await this.client.delete("/user/max-prices", {
				data: { product_name: productName },
			});
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async buyActivationNumber(country, operator, product, options = {}) {
		try {
			const { forwarding, number, reuse, voice, ref, maxPrice } = options;
			const params = { forwarding, number, reuse, voice, ref, maxPrice };
			const response = await this.client.get(`/user/buy/activation/${country}/${operator}/${product}`, { params });
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async buyHostingNumber(country, operator, product) {
		try {
			const response = await this.client.get(`/user/buy/hosting/${country}/${operator}/${product}`);
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async reuseNumber(product, number) {
		try {
			const response = await this.client.get(`/user/reuse/${product}/${number}`);
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async checkOrder(id) {
		try {
			const response = await this.client.get(`/user/check/${id}`);
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async finishOrder(id) {
		try {
			const response = await this.client.get(`/user/finish/${id}`);
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async cancelOrder(id) {
		try {
			const response = await this.client.get(`/user/cancel/${id}`);
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async banOrder(id) {
		try {
			const response = await this.client.get(`/user/ban/${id}`);
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async getSMSInbox(id) {
		try {
			const response = await this.client.get(`/user/sms/inbox/${id}`);
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	// Vendor Methods
	async getVendorProfile() {
		try {
			const response = await this.client.get("/user/vendor");
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async getVendorWallets() {
		try {
			const response = await this.client.get("/vendor/wallets");
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async getVendorOrders({ category, limit = 15, offset = 0, order = "id", reverse = true } = {}) {
		try {
			const params = {
				category,
				limit,
				offset,
				order,
				reverse,
			};
			const response = await this.client.get("/vendor/orders", { params });
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async getVendorPayments({ limit = 15, offset = 0, order = "id", reverse = true } = {}) {
		try {
			const params = { limit, offset, order, reverse };
			const response = await this.client.get("/vendor/payments", { params });
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	async createPayout(receiver, method, amount, fee) {
		try {
			const response = await this.client.post("/vendor/withdraw", {
				receiver,
				method,
				amount,
				fee,
			});
			return response.data;
		} catch (error) {
			throw this._handleError(error);
		}
	}

	// Error Handling
	static _handleError(error) {
		if (error.response) {
			const { status, data } = error.response;
			return new Error(`API Error ${status}: ${JSON.stringify(data)}`);
		}
		return error;
	}

	_handleError(error) {
		return FiveSimAPI._handleError(error);
	}
}

module.exports = FiveSimAPI;
